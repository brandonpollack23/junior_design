
uP_Module1_p1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f4  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000188  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000cd  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000082  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000ee  00000000  00000000  00000a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000024  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000da  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
    }
}

void inline io_init()
{
	DDRA = 0; //make sure that port A is set to input	
  a4:	11 b8       	out	0x01, r1	; 1
	//make direction of OCA 1 (not sure which pin it is yet)
}

void inline tc_init()
{
	TCCR1A |= 1<<COM1A0 | 1<<COM1B0; //turn on output compare A
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 65       	ori	r24, 0x50	; 80
  ae:	80 83       	st	Z, r24
	OCR1AH = (0xFF00 & OCVAL)>>8;
  b0:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = OCVAL;
  b4:	8a ef       	ldi	r24, 0xFA	; 250
  b6:	80 93 88 00 	sts	0x0088, r24
	OCR1BH = (0xFF00 & OCVAL)>>8;
  ba:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = OCVAL;	
  be:	80 93 8a 00 	sts	0x008A, r24
	TCCR1B |= 1<<WGM12 | 1<<CS10; //WG is CTC mode (OCA is now top) and cs is 1 for sound	
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	89 60       	ori	r24, 0x09	; 9
  ca:	80 83       	st	Z, r24
	io_init();
	tc_init();
		
    while(1)
    {
		input = PINA & (1); //input is the LSB of porta
  cc:	80 b1       	in	r24, 0x00	; 0
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	80 93 00 01 	sts	0x0100, r24
		if(input == 1)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	31 f4       	brne	.+12     	; 0xe4 <main+0x40>
		{
			//change div in TCCR1B to be 2k Hz(div1), turn off OCB, turn on OCA
			DDRD &= (0xFF & ~(1<<DDD4)); //clear DDR4 OCB
  d8:	54 98       	cbi	0x0a, 4	; 10
			DDRD |= 1<<DDD5; //set DDR5 OCA
  da:	55 9a       	sbi	0x0a, 5	; 10
			TCCR1B &= (1<<WGM12 | 1<<CS10);
  dc:	80 81       	ld	r24, Z
  de:	89 70       	andi	r24, 0x09	; 9
  e0:	80 83       	st	Z, r24
  e2:	f4 cf       	rjmp	.-24     	; 0xcc <main+0x28>
		}
		else
		{
			//change div in TCCR1B to be 2 Hz (div1024), turn off OCA, on OCB
			DDRD &= (0xFF & ~(1<<DDD5)); //clear DDR5 OCA
  e4:	55 98       	cbi	0x0a, 5	; 10
			DDRD |= 1<<DDD4; //set DDR4 OCB
  e6:	54 9a       	sbi	0x0a, 4	; 10
			TCCR1B |= 1<<CS12;
  e8:	80 81       	ld	r24, Z
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	80 83       	st	Z, r24
  ee:	ee cf       	rjmp	.-36     	; 0xcc <main+0x28>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
