
uP_Module2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080022c  0080022c  0000057e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002ff  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000136  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000177  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000ac  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ad  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000018b  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee eb       	ldi	r30, 0xBE	; 190
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 32       	cpi	r26, 0x2C	; 44
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	ac e2       	ldi	r26, 0x2C	; 44
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 33       	cpi	r26, 0x33	; 51
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
	sei();
}

void inline ADC_init()
{	
	ADMUX |= (1<<REFS0); //set AVCC as reference (5V)
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN | 1<<ADSC | 1<<ADATE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; //enable ADC, enable interrupt, start free running mode, divide clock by max(save power)
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	87 6e       	ori	r24, 0xE7	; 231
  cc:	80 83       	st	Z, r24
}

void inline SPI_init()
{
	DDRB |= (1<<MOSI_BIT | 1<<SCK_BIT | 1<<PORTB4); // /ss, sck, and mosi all outputs
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	80 6b       	ori	r24, 0xB0	; 176
  d2:	84 b9       	out	0x04, r24	; 4
	SPSR0 |= 1<<SPI2X0;
  d4:	8d b5       	in	r24, 0x2d	; 45
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8d bd       	out	0x2d, r24	; 45
	SPCR0 |= (1<<SPE0 | 1<<MSTR0); //enable in master mode, fosc/4 frequency ie 2 mhz
  da:	8c b5       	in	r24, 0x2c	; 44
  dc:	80 65       	ori	r24, 0x50	; 80
  de:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1<<PORTB4; //make /ss high
  e0:	2c 9a       	sbi	0x05, 4	; 5
}

void inline IO_init() //the two LSB of IO port are inputs, determine what kind of wave
{	
	IOPORT_DIR &= (~0b11); //make bits 1 and 0 inputs
  e2:	87 b1       	in	r24, 0x07	; 7
  e4:	8c 7f       	andi	r24, 0xFC	; 252
  e6:	87 b9       	out	0x07, r24	; 7
	//be changing at a frequency of 100Hz * 50 samples = 5000 Hz
	//so I need to reach top of counter at a frequency of 5000 Hz
	//1e6/5000 is 200 which is the least I'll count up to
	//the most is 1e6/500 (500 is 50 * 10 hz) which is 2000
	
	TIMSK1 |= (1<<OCIE1A); //allow interrupts when I reach OCA
  e8:	ef e6       	ldi	r30, 0x6F	; 111
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
	OCR1AH = (0xFF00 & 16000) >> 8;
  f2:	8e e3       	ldi	r24, 0x3E	; 62
  f4:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = (0xFF & 16000);  //set top to 16000, default frequency of 10 hz	
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |= (1<<WGM12 | 1<< CS10); //turn on CTC mode, do not prescale the clock
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	99 60       	ori	r25, 0x09	; 9
 106:	90 83       	st	Z, r25
	SPI_init();
	IO_init();
	TC_init();
	
	//up the clock speed to 8MHZ
	CLKPR = 1<<CLKPCE;
 108:	e1 e6       	ldi	r30, 0x61	; 97
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 83       	st	Z, r24
	CLKPR &= 1<<CLKPCE; //switch to 8 MHZ 
 10e:	80 81       	ld	r24, Z
 110:	80 78       	andi	r24, 0x80	; 128
 112:	80 83       	st	Z, r24
	
	sei();
 114:	78 94       	sei
	
    while(1)
    {
       asm("nop");
 116:	00 00       	nop
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x5c>

0000011a <_Z11getWaveCodev>:
	TCCR1B |= (1<<WGM12 | 1<< CS10); //turn on CTC mode, do not prescale the clock
}

uint8_t getWaveCode()
{
	uint8_t retval = IOPORT_IN;
 11a:	86 b1       	in	r24, 0x06	; 6
	retval &= 0b11;
	return retval;
}
 11c:	83 70       	andi	r24, 0x03	; 3
 11e:	08 95       	ret

00000120 <_Z9getADCValv>:
{
	uint16_t ADC_Low = 0;
	uint16_t ADC_High = 0;
	uint16_t retval = 0;
	
	ADC_Low = ADCL;
 120:	20 91 78 00 	lds	r18, 0x0078
	ADC_High = ADCH << 8; //shift by 8 bits for the sum
 124:	30 91 79 00 	lds	r19, 0x0079
	
	retval = ADC_Low + ADC_High;
	
	ADCSRA |= 1<<ADIF; //clear the conversion done bit
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
	uint16_t ADC_Low = 0;
	uint16_t ADC_High = 0;
	uint16_t retval = 0;
	
	ADC_Low = ADCL;
	ADC_High = ADCH << 8; //shift by 8 bits for the sum
 132:	93 2f       	mov	r25, r19
 134:	80 e0       	ldi	r24, 0x00	; 0
	
	retval = ADC_Low + ADC_High;
 136:	ac 01       	movw	r20, r24
 138:	42 0f       	add	r20, r18
 13a:	51 1d       	adc	r21, r1
 13c:	9a 01       	movw	r18, r20
	
	ADCSRA |= 1<<ADIF; //clear the conversion done bit
	
	return retval;
}
 13e:	84 2f       	mov	r24, r20
 140:	93 2f       	mov	r25, r19
 142:	08 95       	ret

00000144 <_Z14send_DAC_valuej>:

void send_DAC_value(uint16_t val)
{
	PORTB &= ~(1<<PORTB4); //turn off /ss
 144:	2c 98       	cbi	0x05, 4	; 5
	
	//code to update outputs and load to DACA is 1001
	val = val << 2;
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
	val |= (0b1001 << 12);
 14e:	90 69       	ori	r25, 0x90	; 144
	
	SPDR0 = val >> 8; //upper byte first
 150:	9e bd       	out	0x2e, r25	; 46
	
	while(!(SPSR0 & 1<<SPIF0)); //wait until SPIF is set
 152:	0d b4       	in	r0, 0x2d	; 45
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <_Z14send_DAC_valuej+0xe>
	
	SPDR0 = (0xFF & val); //send lower byte
 158:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR0 & 1<<SPIF0)); //wait until lower byte is done
 15a:	0d b4       	in	r0, 0x2d	; 45
 15c:	07 fe       	sbrs	r0, 7
 15e:	fd cf       	rjmp	.-6      	; 0x15a <_Z14send_DAC_valuej+0x16>
	
	PORTB |= 1<<PORTB4; //toggle /ss to finish
 160:	2c 9a       	sbi	0x05, 4	; 5
 162:	08 95       	ret

00000164 <__vector_13>:
       asm("nop");
    }
}

ISR(TIMER1_COMPA_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	cli();
 186:	f8 94       	cli
	
	prev_waveCode = waveCode;
 188:	80 91 32 02 	lds	r24, 0x0232
 18c:	80 93 31 02 	sts	0x0231, r24
	waveCode = getWaveCode();
 190:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11getWaveCodev>
 194:	80 93 32 02 	sts	0x0232, r24
	
	if((waveCode != prev_waveCode) || sample_count == 50)
 198:	90 91 32 02 	lds	r25, 0x0232
 19c:	80 91 31 02 	lds	r24, 0x0231
 1a0:	98 13       	cpse	r25, r24
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <__vector_13+0x48>
 1a4:	80 91 30 02 	lds	r24, 0x0230
 1a8:	82 33       	cpi	r24, 0x32	; 50
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <__vector_13+0x4c>
	{
		sample_count = 0; //we change wave types so restart at 0 or we reached the end of our arrays
 1ac:	10 92 30 02 	sts	0x0230, r1
	}
	
	if(waveCode == 0) //draw sine
 1b0:	80 91 32 02 	lds	r24, 0x0232
 1b4:	81 11       	cpse	r24, r1
 1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <__vector_13+0x74>
	{
		send_DAC_value(sin_LUT[sample_count++]);
 1b8:	20 91 30 02 	lds	r18, 0x0230
 1bc:	e2 2f       	mov	r30, r18
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e8 53       	subi	r30, 0x38	; 56
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	80 81       	ld	r24, Z
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	20 93 30 02 	sts	0x0230, r18
 1d2:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14send_DAC_valuej>
 1d6:	43 c0       	rjmp	.+134    	; 0x25e <__vector_13+0xfa>
	}
	else if(waveCode == 1) //draw square
 1d8:	80 91 32 02 	lds	r24, 0x0232
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	99 f4       	brne	.+38     	; 0x206 <__vector_13+0xa2>
	{
		if(sample_count < 25)
 1e0:	80 91 30 02 	lds	r24, 0x0230
 1e4:	89 31       	cpi	r24, 0x19	; 25
 1e6:	28 f4       	brcc	.+10     	; 0x1f2 <__vector_13+0x8e>
		{
			send_DAC_value(0); //half the period 0
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14send_DAC_valuej>
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <__vector_13+0x96>
		}
		else
		{
			send_DAC_value(1023); //other half the period VCC
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14send_DAC_valuej>
		}
		sample_count++;
 1fa:	80 91 30 02 	lds	r24, 0x0230
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 30 02 	sts	0x0230, r24
 204:	2c c0       	rjmp	.+88     	; 0x25e <__vector_13+0xfa>
	}
	else if(waveCode == 2) //draw triangle
 206:	80 91 32 02 	lds	r24, 0x0232
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	81 f4       	brne	.+32     	; 0x22e <__vector_13+0xca>
	{
		send_DAC_value(tri_LUT[sample_count++]);
 20e:	20 91 30 02 	lds	r18, 0x0230
 212:	e2 2f       	mov	r30, r18
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	20 93 30 02 	sts	0x0230, r18
 228:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14send_DAC_valuej>
 22c:	18 c0       	rjmp	.+48     	; 0x25e <__vector_13+0xfa>
	}
	else if(waveCode == 3) //draw sawtooth
 22e:	80 91 32 02 	lds	r24, 0x0232
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	81 f4       	brne	.+32     	; 0x256 <__vector_13+0xf2>
	{
		send_DAC_value(saw_LUT[sample_count++]);
 236:	20 91 30 02 	lds	r18, 0x0230
 23a:	e2 2f       	mov	r30, r18
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	ec 59       	subi	r30, 0x9C	; 156
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	2f 5f       	subi	r18, 0xFF	; 255
 24c:	20 93 30 02 	sts	0x0230, r18
 250:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14send_DAC_valuej>
 254:	04 c0       	rjmp	.+8      	; 0x25e <__vector_13+0xfa>
	}
	else //something wnet wrong, output 2.5 volts
	{
		send_DAC_value(1023/2);
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 a2 00 	call	0x144	; 0x144 <_Z14send_DAC_valuej>
	}
	
	//check the ADC and make the new OCR1AH and L accordingly
	
	if (ADCSRA & 1<<ADIF) //if a conversion is complete, update the new top
 25e:	80 91 7a 00 	lds	r24, 0x007A
 262:	84 ff       	sbrs	r24, 4
 264:	5f c0       	rjmp	.+190    	; 0x324 <__vector_13+0x1c0>
	{
		current_ADC = (uint32_t) getADCVal();
 266:	0e 94 90 00 	call	0x120	; 0x120 <_Z9getADCValv>
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	80 93 2c 02 	sts	0x022C, r24
 272:	90 93 2d 02 	sts	0x022D, r25
 276:	a0 93 2e 02 	sts	0x022E, r26
 27a:	b0 93 2f 02 	sts	0x022F, r27
		current_ADC *= (uint32_t) (16000 - 1600); //top is equal to ADC(2000-200)/1023 + 200
 27e:	20 91 2c 02 	lds	r18, 0x022C
 282:	30 91 2d 02 	lds	r19, 0x022D
 286:	40 91 2e 02 	lds	r20, 0x022E
 28a:	50 91 2f 02 	lds	r21, 0x022F
 28e:	a0 e4       	ldi	r26, 0x40	; 64
 290:	b8 e3       	ldi	r27, 0x38	; 56
 292:	0e 94 c6 01 	call	0x38c	; 0x38c <__muluhisi3>
 296:	60 93 2c 02 	sts	0x022C, r22
 29a:	70 93 2d 02 	sts	0x022D, r23
 29e:	80 93 2e 02 	sts	0x022E, r24
 2a2:	90 93 2f 02 	sts	0x022F, r25
		current_ADC /= (uint32_t) 1023;
 2a6:	60 91 2c 02 	lds	r22, 0x022C
 2aa:	70 91 2d 02 	lds	r23, 0x022D
 2ae:	80 91 2e 02 	lds	r24, 0x022E
 2b2:	90 91 2f 02 	lds	r25, 0x022F
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	33 e0       	ldi	r19, 0x03	; 3
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	0e 94 a4 01 	call	0x348	; 0x348 <__udivmodsi4>
 2c2:	20 93 2c 02 	sts	0x022C, r18
 2c6:	30 93 2d 02 	sts	0x022D, r19
 2ca:	40 93 2e 02 	sts	0x022E, r20
 2ce:	50 93 2f 02 	sts	0x022F, r21
		current_ADC += (uint32_t) 1600;
 2d2:	80 91 2c 02 	lds	r24, 0x022C
 2d6:	90 91 2d 02 	lds	r25, 0x022D
 2da:	a0 91 2e 02 	lds	r26, 0x022E
 2de:	b0 91 2f 02 	lds	r27, 0x022F
 2e2:	80 5c       	subi	r24, 0xC0	; 192
 2e4:	99 4f       	sbci	r25, 0xF9	; 249
 2e6:	af 4f       	sbci	r26, 0xFF	; 255
 2e8:	bf 4f       	sbci	r27, 0xFF	; 255
 2ea:	80 93 2c 02 	sts	0x022C, r24
 2ee:	90 93 2d 02 	sts	0x022D, r25
 2f2:	a0 93 2e 02 	sts	0x022E, r26
 2f6:	b0 93 2f 02 	sts	0x022F, r27
		
		OCR1AH = (0xFF00 & current_ADC) >> 8;
 2fa:	80 91 2c 02 	lds	r24, 0x022C
 2fe:	90 91 2d 02 	lds	r25, 0x022D
 302:	a0 91 2e 02 	lds	r26, 0x022E
 306:	b0 91 2f 02 	lds	r27, 0x022F
 30a:	89 2f       	mov	r24, r25
 30c:	80 93 89 00 	sts	0x0089, r24
		OCR1AL = 0xFF & current_ADC; //new top set for next round
 310:	80 91 2c 02 	lds	r24, 0x022C
 314:	90 91 2d 02 	lds	r25, 0x022D
 318:	a0 91 2e 02 	lds	r26, 0x022E
 31c:	b0 91 2f 02 	lds	r27, 0x022F
 320:	80 93 88 00 	sts	0x0088, r24
	}
	
	sei();
 324:	78 94       	sei
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__udivmodsi4>:
 348:	a1 e2       	ldi	r26, 0x21	; 33
 34a:	1a 2e       	mov	r1, r26
 34c:	aa 1b       	sub	r26, r26
 34e:	bb 1b       	sub	r27, r27
 350:	fd 01       	movw	r30, r26
 352:	0d c0       	rjmp	.+26     	; 0x36e <__udivmodsi4_ep>

00000354 <__udivmodsi4_loop>:
 354:	aa 1f       	adc	r26, r26
 356:	bb 1f       	adc	r27, r27
 358:	ee 1f       	adc	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	a2 17       	cp	r26, r18
 35e:	b3 07       	cpc	r27, r19
 360:	e4 07       	cpc	r30, r20
 362:	f5 07       	cpc	r31, r21
 364:	20 f0       	brcs	.+8      	; 0x36e <__udivmodsi4_ep>
 366:	a2 1b       	sub	r26, r18
 368:	b3 0b       	sbc	r27, r19
 36a:	e4 0b       	sbc	r30, r20
 36c:	f5 0b       	sbc	r31, r21

0000036e <__udivmodsi4_ep>:
 36e:	66 1f       	adc	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	1a 94       	dec	r1
 378:	69 f7       	brne	.-38     	; 0x354 <__udivmodsi4_loop>
 37a:	60 95       	com	r22
 37c:	70 95       	com	r23
 37e:	80 95       	com	r24
 380:	90 95       	com	r25
 382:	9b 01       	movw	r18, r22
 384:	ac 01       	movw	r20, r24
 386:	bd 01       	movw	r22, r26
 388:	cf 01       	movw	r24, r30
 38a:	08 95       	ret

0000038c <__muluhisi3>:
 38c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__umulhisi3>
 390:	a5 9f       	mul	r26, r21
 392:	90 0d       	add	r25, r0
 394:	b4 9f       	mul	r27, r20
 396:	90 0d       	add	r25, r0
 398:	a4 9f       	mul	r26, r20
 39a:	80 0d       	add	r24, r0
 39c:	91 1d       	adc	r25, r1
 39e:	11 24       	eor	r1, r1
 3a0:	08 95       	ret

000003a2 <__umulhisi3>:
 3a2:	a2 9f       	mul	r26, r18
 3a4:	b0 01       	movw	r22, r0
 3a6:	b3 9f       	mul	r27, r19
 3a8:	c0 01       	movw	r24, r0
 3aa:	a3 9f       	mul	r26, r19
 3ac:	01 d0       	rcall	.+2      	; 0x3b0 <__umulhisi3+0xe>
 3ae:	b2 9f       	mul	r27, r18
 3b0:	70 0d       	add	r23, r0
 3b2:	81 1d       	adc	r24, r1
 3b4:	11 24       	eor	r1, r1
 3b6:	91 1d       	adc	r25, r1
 3b8:	08 95       	ret

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
